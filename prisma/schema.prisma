datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId       String      @unique
  email         String      @unique
  name          String?
  username      String?     @unique
  bio           String?
  avatarUrl     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reputation    Int         @default(0)
  
  // Content relations
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  tagFollows    TagFollow[]
  
  // Social relations
  sentFriendRequests     Friendship[]  @relation("FriendshipRequester")
  receivedFriendRequests Friendship[]  @relation("FriendshipAddressee")
  favoritePosts          SavedPost[]
  blockedUsers           UserBlock[]   @relation("Blocker")
  blockedBy             UserBlock[]   @relation("Blocked")
}

model Friendship {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requesterId   String    @db.Uuid
  addresseeId   String    @db.Uuid
  status        FriendshipStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  requester     User      @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee     User      @relation("FriendshipAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@index([requesterId])
  @@index([addresseeId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model UserBlock {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  blockerId   String    @db.Uuid
  blockedId   String    @db.Uuid
  createdAt   DateTime  @default(now())
  reason      String?

  blocker     User      @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked     User      @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model SavedPost {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  postId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  notes       String?
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Post {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  content     String
  published   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  viewCount   Int         @default(0)
  voteCount   Int         @default(0)
  
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String      @db.Uuid
  comments    Comment[]
  votes       Vote[]
  tags        PostTag[]
  savedBy     SavedPost[]
}

model Comment {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  voteCount   Int         @default(0)
  
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String      @db.Uuid
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String      @db.Uuid
  votes       Vote[]
  
  parentId    String?     @db.Uuid
  parent      Comment?    @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[]   @relation("CommentToComment")
}

model Tag {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String      @unique
  description   String?
  createdAt     DateTime    @default(now())
  postCount     Int         @default(0)
  followerCount Int         @default(0)
  
  color         String?
  icon          String?
  type          String?
  version       String?
  synonyms      String[]
  
  parentId      String?     @db.Uuid
  parent        Tag?        @relation("TagHierarchy", fields: [parentId], references: [id])
  children      Tag[]       @relation("TagHierarchy")
  
  posts         PostTag[]
  followers     TagFollow[]
}

model PostTag {
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String      @db.Uuid
  tag         Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       String      @db.Uuid
  createdAt   DateTime    @default(now())
  
  @@id([postId, tagId])
  @@index([tagId])
  @@index([postId])
}

model TagFollow {
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @db.Uuid
  tag         Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       String      @db.Uuid
  createdAt   DateTime    @default(now())
  
  @@id([userId, tagId])
  @@index([tagId])
  @@index([userId])
}

model Vote {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value       Int
  createdAt   DateTime    @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @db.Uuid
  post        Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?     @db.Uuid
  comment     Comment?    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String?     @db.Uuid
  
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
  @@index([userId])
}